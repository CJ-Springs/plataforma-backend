// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  email       String    @unique
  isSuspended Boolean   @default(false) @map("is_suspended")
  deleted     Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  password     Password?
  profile      Profile?
  codes        Code[]
  incomeOrders IncomeOrder[]
  roles        Role[]        @relation("roles_users")

  @@index([email, id], map: "users_id_email")
  @@map("users")
}

model Password {
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @id @unique @map("user_id")

  @@map("passwords")
}

model Profile {
  firstname String
  lastname  String
  document  Int
  phone     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @id @unique @map("user_id")

  @@map("profiles")
}

model Code {
  id String @id @default(cuid())

  code      Int
  used      Boolean  @default(false)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")

  @@map("recovery_codes")
}

model Role {
  id String @id @default(cuid())

  code      AppRole  @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users       User[]       @relation("roles_users")
  permissions Permission[] @relation("roles_permissions")

  @@index([code], map: "roles_code")
  @@map("roles")
}

model Permission {
  id String @id @default(cuid())

  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at")

  roles Role[] @relation("roles_permissions")

  @@map("permissions")
}

model IncomeOrder {
  id String @id @default(cuid())

  status    IncomeOrderStatus @default(EN_PROGRESO)
  createdAt DateTime          @default(now()) @map("created_at")

  user   User              @relation(fields: [userId], references: [id])
  userId String            @map("user_id")
  items  IncomeOrderItem[]

  @@map("income_orders")
}

model IncomeOrderItem {
  id String @id @default(cuid())

  entered   Int
  createdAt DateTime @default(now()) @map("created_at")

  order       IncomeOrder @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId     String      @map("order_id")
  product     Product     @relation(fields: [productCode], references: [code])
  productCode String      @map("product_code")

  @@map("income_order_items")
}

model Product {
  id String @id @default(cuid())

  code          String          @unique
  type          ProductType
  position      ProductPosition
  description   String?
  brand         String
  model         String
  isGnc         Boolean         @map("is_gnc")
  amountOfSales Int             @default(0) @map("amount_of_sales")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  price                ProductPricing?
  sales                SaleOrderItem[]
  incomes              IncomeOrderItem[]
  lossesByWarranties   WarrantyOrderItem[]
  incomesByCreditNotes CreditNoteItem[]

  spring   Spring @relation(fields: [springId], references: [id])
  springId String @map("spring_id")

  @@index([code], map: "products_code")
  @@map("products")
}

model ProductPricing {
  price     Float
  currency  Currencies @default(ARS)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  product     Product @relation(fields: [productCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  productCode String  @id @unique @map("product_code")

  @@map("products_pricing")
}

model Spring {
  id String @id @default(cuid())

  code         String   @unique
  canAssociate Boolean  @map("can_associate")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  stock          Stock?
  technicalSheet TechnicalSheet?
  products       Product[]
  movements      Movement[]

  @@index([code], map: "springs_code")
  @@map("springs")
}

model Stock {
  quantityOnHand Int      @map("quantity_on_hand")
  minQuantity    Int      @map("min_quantity")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  spring   Spring @relation(fields: [springId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  springId String @id @unique @map("spring_id")

  @@map("stocks")
}

model Movement {
  id String @id @default(cuid())

  type         MovementType
  reason       String
  quantity     Int
  updatedStock Int          @map("updated_stock")
  createdAt    DateTime     @default(now()) @map("created_at")

  spring   Spring @relation(fields: [springId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  springId String @map("spring_id")

  @@map("movements")
}

model TechnicalSheet {
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  type      TechnicalSheetType

  //Common fields between the three posible types of Spring

  weight            Float?
  height            Float?
  wireThickness     Float? @map("wire_thickness")
  amountOfLaps      Float? @map("amount_of_laps")
  barLength         Float? @map("bar_length")
  lightBetweenBases Float? @map("light_between_bases")
  innerCore         Float? @map("inner_core")

  //Not common fields

  // TRABA_OJAL AND OJAL_OJAL
  lightBetweenBasesTwo Float? @map("light_between_bases_two")
  innerBases           Float? @map("inner_bases")

  // ONLY OJAL_OJAL
  innerBasesTwo Float? @map("inner_bases_two")

  spring   Spring @relation(fields: [springId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  springId String @id @unique @map("spring_id")

  @@map("technical_sheets")
}

model Customer {
  id String @id @default(cuid())

  code            Int      @unique
  email           String   @unique
  name            String
  phone           String
  discount        Int?
  balance         Float    @default(0)
  cuil            String?
  paymentDeadline Int      @map("payment_deadline")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  address     Address?
  buys        SaleOrder[]
  warranties  WarrantyOrder[]
  creditNotes CreditNote[]
  deposits    Deposit[]

  @@index([code], map: "customers_code")
  @@map("customers")
}

model Address {
  country     String   @default("Argentina")
  countryCode String   @default("ARG") @map("country_code")
  province    String
  city        String
  locality    String
  address     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String   @id @unique @map("customer_id")

  @@map("addresses")
}

model WarrantyOrder {
  id String @id @default(cuid())

  observation String?
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  items WarrantyOrderItem[]

  customer     Customer @relation(fields: [customerCode], references: [code])
  customerCode Int      @map("customer_code")

  @@map("warranty_orders")
}

model WarrantyOrderItem {
  id String @id @default(cuid())

  requested Int
  createdAt DateTime @default(now()) @map("created_at")

  order       WarrantyOrder @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId     String        @map("order_id")
  product     Product       @relation(fields: [productCode], references: [code])
  productCode String        @map("product_code")

  @@map("warranty_order_items")
}

model CreditNote {
  id String @id @default(cuid())

  observation String?
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  items CreditNoteItem[]

  customer     Customer @relation(fields: [customerCode], references: [code])
  customerCode Int      @map("customer_code")

  @@map("credit_notes")
}

model CreditNoteItem {
  id String @id @default(cuid())

  returned  Int
  price     Float
  createdAt DateTime @default(now()) @map("created_at")

  creditNote   CreditNote @relation(fields: [creditNoteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creditNoteId String     @map("credit_note_id")
  product      Product    @relation(fields: [productCode], references: [code])
  productCode  String     @map("product_code")

  @@map("credit_note_items")
}

model SaleOrder {
  id String @id @default(cuid())

  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  items   SaleOrderItem[]
  invoice Invoice?

  customer     Customer @relation(fields: [customerCode], references: [code])
  customerCode Int      @map("customer_code")

  @@map("sale_orders")
}

model SaleOrderItem {
  id String @id @default(cuid())

  requested Int
  price     Float
  discount  Int?
  salePrice Float    @map("sale_price")
  createdAt DateTime @default(now()) @map("created_at")

  order       SaleOrder @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId     String    @map("order_id")
  product     Product   @relation(fields: [productCode], references: [code])
  productCode String    @map("product_code")

  @@map("sale_order_items")
}

model Deposit {
  id String @id @default(cuid())

  paymentMethod PaymentMethod @map("payment_method")
  amount        Float
  remaining     Float
  createdBy     String        @map("created_by")
  canceledBy    String?       @map("canceled_by")
  status        PaymentStatus @default(ABONADO)
  metadata      Json?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  customer     Customer @relation(fields: [customerCode], references: [code])
  customerCode Int      @map("customer_code")

  @@map("deposits")
}

model Invoice {
  id String @id @default(cuid())

  number    Int           @unique @default(autoincrement())
  total     Float
  deposited Float
  dueDate   DateTime      @map("due_date") @db.Date
  status    InvoiceStatus @default(POR_PAGAR)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  payments Payment[]

  order   SaleOrder @relation(fields: [orderId], references: [id])
  orderId String    @unique @map("order_id")

  @@index([id], map: "invoices_id")
  @@map("invoices")
}

model Payment {
  id String @id @default(cuid())

  paymentMethod PaymentMethod @map("payment_method")
  totalAmount   Float         @map("total_amount")
  netAmount     Float         @map("net_amount")
  remaining     Float
  depositId     String?       @map("deposit_id")
  metadata      Json?
  createdBy     String        @map("created_by")
  canceledBy    String?       @map("canceled_by")
  status        PaymentStatus @default(ABONADO)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoiceId String  @map("invoice_id")

  @@map("payments")
}

enum AppRole {
  SUPER_ADMIN
  ADMINISTRATIVO
  DEPOSITO
}

enum IncomeOrderStatus {
  EN_PROGRESO
  ANULADA
  CONCRETADA
}

enum InvoiceStatus {
  POR_PAGAR
  PAGADA
  DEUDA
}

enum PaymentStatus {
  ABONADO
  ANULADO
}

enum ProductType {
  STANDARD
  REFORZADO
  RALLY
  PROGRESIVO
  COMPETICION
  ESPECIAL
  REGULABLE
  CONFORT
  XTREME
}

enum ProductPosition {
  DELANTERO
  TRASERO
}

enum MovementType {
  INGRESO
  EGRESO
}

enum TechnicalSheetType {
  TRABA_TRABA
  TRABA_OJAL
  OJAL_OJAL
}

enum PaymentMethod {
  MERCADO_PAGO
  TRANSFERENCIA
  EFECTIVO
  CHEQUE
  SALDO_A_FAVOR
}

enum Currencies {
  ARS
  USD
}
